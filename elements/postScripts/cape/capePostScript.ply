from math import pow,sqrt
from collections import OrderedDict


# def buildMembraine():
capeDict = OrderedDict()

capeDict['capeSecondary_L0_0_jnt'] = '.cv[0][0]'
capeDict['capeSecondary_L0_1_jnt'] = '.cv[0][1]'
capeDict['capeSecondary_L0_2_jnt'] = '.cv[0][2]'
capeDict['capeSecondary_L0_3_jnt'] = '.cv[0][3]'
capeDict['capeSecondary_L0_4_jnt'] = '.cv[0][4]'
capeDict['capeSecondary_L0_4_end'] = '.cv[0][5]'

capeDict['capePrimary_C0_0_jnt'] = 'cv[1][0]'
capeDict['capePrimary_C0_1_jnt'] = 'cv[1][1]'
capeDict['capePrimary_C0_2_jnt'] = 'cv[1][2]'
capeDict['capePrimary_C0_3_jnt'] = 'cv[1][3]'
capeDict['capePrimary_C0_4_jnt'] = 'cv[1][4]'
capeDict['capePrimary_C0_4_end'] = 'cv[1][5]'

capeDict['capeSecondary_R0_0_jnt'] = '.cv[2][0]'
capeDict['capeSecondary_R0_1_jnt'] = '.cv[2][1]'
capeDict['capeSecondary_R0_2_jnt'] = '.cv[2][2]'
capeDict['capeSecondary_R0_3_jnt'] = '.cv[2][3]'
capeDict['capeSecondary_R0_4_jnt'] = '.cv[2][4]'
capeDict['capeSecondary_R0_4_end'] = '.cv[2][5]'




print capeDict

keyList = []
keyList=(capeDict.keys())
print keyList

#Create Nurbs
# n1 = cmds.nurbsPlane(ch=1, d=1, v=4, p=(0, 0, 0), u=2, w=0.1, ax=(0, 1, 0), lr=1)[0]

#Move cv's to match joint pos
for k,v in capeDict.iteritems():
    if k.endswith('_end'):
        prvIdx = keyList.index(k)-1
        prvJnt = keyList[prvIdx]

        tmpTra = cmds.createNode('transform', n='keyTemp', ss=True)
        prvPos = cmds.xform(prvJnt, q=True, m=True, ws=True)
        cmds.xform(tmpTra, m=prvPos)


buildMembraine()

    


            dist = distBetween(k, capeDict.keys(k-1))
            print dist

        
        pos = cmds.xform(k, q=True, t=True, ws=True)
        cmds.xform(n1+v, t=pos, ws=True)

    #Set skinweights to 100% per jnt
    cmds.skinCluster(capeDict.keys(), n1, mi=2, bm=0, sm=0, dr=4, wd=0, tsb=1, n='wing_'+'C'+'0_membraineN1_skn')
    for k,v in capeDict.iteritems():
        cmds.skinPercent('wing_'+'C'+'0_membraineN1_skn', n1+v, transformValue=[(k, 1.0)])

    # #Convert to smooth nurbs
    # n2 = cmds.rebuildSurface(n1, rt=0, kc=0, fr=0, ch=1, end=1, sv=0, su=0, kr=0, dir=2, kcp=1, tol=0.01, dv=2, du=2, rpo=0)[0]
    # cmds.delete(n2, ch=True)
    # cmds.skinCluster(dic.keys(), n2, mi=2, bm=0, sm=0, dr=4, wd=0, tsb=1, n='wing_'+'C'+'0_membraineN2_skn')
    # cmds.copySkinWeights(ss='wing_'+'C'+'0_membraineN1_skn', ds='wing_'+'C'+'0_membraineN2_skn', noMirror=True)
    # cmds.select(None)

    #Clean up
    #cmds.parent(n1, n2, 'wingFeatherBuilder')
    # cmds.setAttr(n1+'.v', 0)
    cmds.rename(n1, 'wing_'+'C'+'0_membraineN1_drv')
    # cmds.rename(n2, 'wing_'+'C'+'0_membraineN2_drv')

    cmds.select(None)


buildMembraine()



def distBetween(obj1, obj2):
    pos1 = cmds.xform(obj1, q=True, t=True, ws=True)
    pos2 = cmds.xform(obj2, q=True, t=True, ws=True)
    # Distance formula : âˆš((x2 - x1)2 + (y2 - y1)2 + (z2 - z1)2)
    distance = sqrt(pow(pos1[0]-pos2[0],2)+pow(pos1[1]-pos2[1],2)+pow(pos1[2]-pos2[2],2))
    return distance